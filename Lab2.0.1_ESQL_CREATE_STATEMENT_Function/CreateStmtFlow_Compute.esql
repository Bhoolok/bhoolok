

CREATE COMPUTE MODULE CreateStmtFlow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		--Declare Statement
		DECLARE addr CHARACTER;
		DECLARE sum INTEGER 0;
		
		DECLARE myref REFERENCE TO InputRoot.XMLNSC.order.items.item1;
		
		--MOVE Statement
		WHILE LASTMOVE(myref) = TRUE DO
			SET OutputRoot.XMLNSC.order = myref.price;
			SET sum = sum + CAST(myref.price AS INTEGER);
			MOVE myref NEXTSIBLING;
		END WHILE;

		SET OutputRoot.XMLNSC.order.items.item1.name = InputRoot.XMLNSC.order.items.item1.name;
		SET OutputRoot.XMLNSC.order.items.item1.price = InputRoot.XMLNSC.order.items.item1.price;
		SET OutputRoot.XMLNSC.order.items.item2.name = InputRoot.XMLNSC.order.items.item2.name;
		SET OutputRoot.XMLNSC.order.items.item2.price = InputRoot.XMLNSC.order.items.item2.price;
		SET OutputRoot.XMLNSC.order.items.item3.name = InputRoot.XMLNSC.order.items.item3.name;
		SET OutputRoot.XMLNSC.order.items.item3.price = InputRoot.XMLNSC.order.items.item3.price;

		-- create statement is used to create new message field.
		CREATE LASTCHILD OF OutputRoot.XMLNSC.order.items NAME 'total_price';
		SET OutputRoot.XMLNSC.order.items.total_price = sum;
		--create next sibling of items tag
		CREATE NEXTSIBLING OF OutputRoot.XMLNSC.order.items NAME 'address';
		--create first child of address tag
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.order.address NAME 'name';
		SET addr = 'ameerpet';
		SET OutputRoot.XMLNSC.order.address.name = addr;
		--to create attribute of address tag

		DECLARE ref REFERENCE TO OutputRoot.XMLNSC.order.address;
		SET ref.(XMLNSC.Attribute)state = 'hyderabad';
		-- create sibling of name in address tag

		CREATE NEXTSIBLING OF OutputRoot.XMLNSC.order.address.name NAME 'country';
		SET OutputRoot.XMLNSC.order.address.country = 'india';
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


 

 